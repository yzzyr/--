# **Assignment P 之机考总结**

# **一 考前整理**
自认为是重点实则大错特错
这门课的目的不在于死记硬背生套模板，而在于深度理解熟练运用，（怪我总是太晚明白~）
这份笔记是我着重从作业题中难理解但必须掌握的知识中总结的，千算万算还是没算到自己并查集又又又又失误了。所以希望以后的同学引以为戒，闫老师所指导的知识是很灵活的，不要认为理解了模板题就足够了！！！没有ac4的我真的后悔莫及！如果当时多培养一下举一反三的思维就好了！！！

# **（一）栈、队列**

## **0.！调度场算法**
**这个必须掌握，对很多题的理解都有帮助**
shunting yard -->典型 中序表达式转为后序表达式
主要思想是使用两个栈（运算符栈和输出栈）来处理表达式的符号。算法按照运算符的优先级和结合性，将符号逐个处理并放置到正确的位置。最终，输出栈中的元素就是转换后的后缀表达式。

## **1.！重点 单调栈**
**形式多变，学会模板之后务必要进行其他相关题目的联系（否则真的不知道怎么用）**
```
n=int(input())
alist=list(map(int,input().split()))
stack=[0]*n
res=[0]*n
for i in range(n):
    while stack and alist[stack[-1]]<alist[i]:
        res[stack.pop()]=i+1
    stack.append(i)
print(*res)
```

## **例一 中序表达式转后序表达式**
```
def infix_to_postfix(expression):
    precedence = {'+':1, '-':1, '*':2, '/':2}
    stack = []
    postfix = []
    number = ''
    for char in expression:
        if char.isnumeric() or char == '.':
            number += char
        else:
            if number:
                num = float(number)
                postfix.append(int(num) if num.is_integer() else num)
                number = ''
            if char in '+-*/':
                while stack and stack[-1] in '+-*/' and precedence[char] <= precedence[stack[-1]]:
                    postfix.append(stack.pop())
                stack.append(char)
            elif char == '(':
                stack.append(char)
            elif char == ')':
                while stack and stack[-1] != '(':
                    postfix.append(stack.pop())
                stack.pop()
    if number:
        num = float(number)
        postfix.append(int(num) if num.is_integer() else num)
    while stack:
        postfix.append(stack.pop())
    return ' '.join(str(x) for x in postfix)
```

## **例二 八皇后**
**学会这道题，就学到了dfs的精髓**
dfs回溯实现 或 stack迭代实现

### dfs方法
```
def solve_n_queens(n):
    solutions = []  # 存储所有解决方案的列表
    queens = [-1] * n  # 存储每一行皇后所在的列数
    def backtrack(row):
        if row == n:  # 找到一个合法解决方案
            solutions.append(queens.copy())
        else:
            for col in range(n):
                if is_valid(row, col):  # 检查当前位置是否合法
                    queens[row] = col  # 在当前行放置皇后
                    backtrack(row + 1)  # 递归处理下一行
                    queens[row] = -1  # 回溯，撤销当前行的选择
    def is_valid(row, col):
        for r in range(row):
            if queens[r] == col or abs(row - r) == abs(col - queens[r]):
                return False
        return True
    backtrack(0)  # 从第一行开始回溯
    return solutions
def get_queen_string(b):
    solutions = solve_n_queens(8)
    if b > len(solutions):
        return None
    queen_string = ''.join(str(col + 1) for col in solutions[b - 1])
    return queen_string
```

### stack迭代方法
```
def solve_n_queens(n):
    stack = []  # 用于保存状态的栈
    solutions = []  # 存储所有解决方案的列表
    stack.append((0, [-1] * n))  # 初始状态为第一行，所有列都未放置皇后
    while stack:
        row, queens = stack.pop()
        if row == n:  # 找到一个合法解决方案
            solutions.append(queens.copy())
        else:
            for col in range(n):
                if is_valid(row, col, queens):  # 检查当前位置是否合法
                    new_queens = queens.copy()
                    new_queens[row] = col  # 在当前行放置皇后
                    stack.append((row + 1, new_queens))  # 推进到下一行
    return solutions
def is_valid(row, col, queens):
```

## **例三 合法出栈序列**
**本人最难理解的一道题，看了三遍才懂**
给定一个由大小写字母和数字构成的，没有重复字符的长度不超过62的字符串x，现在要将该字符串的字符依次压入栈中，然后再全部弹出。
要求左边的字符一定比右边的字符先入栈，出栈顺序无要求。
再给定若干字符串，对每个字符串，判断其是否是可能的x中的字符的出栈序列
```
def isPopSeq(s1,s2):#判断s2是不是s1经出入栈得到的出栈序列
	stack = []
	if len(s1) != len(s2):
		return False
	else:
		L = len(s1)
		stack.append(s1[0])
		p1,p2 = 1,0
		while p1 < L:
			if len(stack) > 0 and stack[-1] == s2[p2]:
				stack.pop()
				p2 += 1
			else:
				stack.append(s1[p1])
				p1 += 1
		return "".join(stack[::-1]) == s2[p2:]
```

## **例四 约瑟夫**
**混进来的计概奇怪东西，但可以用也数算方式解决（双端队列法，或双向链表），更好理解也更方便**

## 埃拉托斯特尼筛法（减小时间复杂度）=>欧拉筛法或许更快
可以先找到n可能的最大值，打表防超时，可用math.sqrt
```
def prime_sieve(n):
    sieve=[True]*(n+1)
    sieve[0]=sieve[1]=False
    for i in range(2,int(n**0.5)+1):
        if sieve[i]:
            sieve[i*i:n+1:i]=[False*len(range(i*i,n+1,i))]
    return [i for i in range(n+1) if sieve[i]]
```
## 汉诺塔问题
递归经典算法，但只学过计概c的uu真的不会，每天都在补天
```
def hanoi(n,a,b,c):
    if n==1:
        print(f'1:{a}->{c}')
    elif n>1:
        hanoi(n-1,a,c,b)
        print(f'{n}:{a}->{c}')
        hanoi(n-1,b,a,c)
n,a,b,c=input().split()
n=int(n)
hanoi(n,a,b,c)
```

# **（二）递归、动规**

## **例一 数字三角形的记忆递归型动规程序**
**将复杂问题划分为子问题**
不是很重要，dfs中以及蕴含了
```
def MaxSum(i,j):
    if i == n-1:
        return D[i][j]
    if maxSum[i][j] != -1:
        return maxSum[i][j]
    x = MaxSum(i+1,j)
    y = MaxSum(i+1,j+1)
    maxSum[i][j] = max(x,y) + D[i][j]
    return maxSum[i][j]
```
### **递推程序 自下至上递堆**
```
def main():
    for i in range(n):
        lst = list(map(int,input().split()))
        D.append(lst)
    for i in range(n):
        maxSum[n-1][i] = D[n-1][i]
    for i in range(n-2,-1,-1):
        for j in range(0,i+1):
            maxSum[i][j] = max(maxSum[i+1][j],maxSum[i+1][j+1]) + D[i][j]
```

# **（三）树**
## **例一 Trie**
**前缀树--例如电话号码的前缀是否有重合**
### 1. **插入（Insert）**：

   ```python
   class TrieNode:
       def __init__(self):
           self.children = {}
           self.is_end_of_word = False
   
   class Trie:
       def __init__(self):
           self.root = TrieNode()
   
       def insert(self, word):
           node = self.root
           for char in word:
               if char not in node.children:
                   node.children[char] = TrieNode()
               node = node.children[char]
           node.is_end_of_word = True
   ```

### 2. **查找（Search）**：

   ```python
   def search(self, word):
       node = self.root
       for char in word:
           if char not in node.children:
               return False
           node = node.children[char]
       return node.is_end_of_word
   ```

### 3. **前缀查询（StartsWith）**：

   ```python
   def starts_with(self, prefix):
       node = self.root
       for char in prefix:
           if char not in node.children:
               return False
           node = node.children[char]
       return True
   ```

## **例二 根据后序表达式建立队列表达式（解析树）**
**熟练运用栈**
```
def build_tree(postfix):
    stack = []
    for char in postfix:
        node = TreeNode(char)
        if char.isupper():
            node.right = stack.pop()
            node.left = stack.pop()
        stack.append(node)
    return stack[0]
def level_order_traversal(root):
    queue = [root]
    traversal = []
    while queue:
        node = queue.pop(0)
        traversal.append(node.value)
        if node.left:
            queue.append(node.left)
        if node.right:
            queue.append(node.right)
    return traversal
```

## **例三 括号嵌套树**
```
def parse_tree(s):
    stack = []
    node = None
    for char in s:
        if char.isalpha():  # 如果是字母，创建新节点
            node = TreeNode(char)
            if stack:  # 如果栈不为空，把节点作为子节点加入到栈顶节点的子节点列表中
                stack[-1].children.append(node)
        elif char == '(':  # 遇到左括号，当前节点可能会有子节点
            if node:
                stack.append(node)  # 把当前节点推入栈中
                node = None
        elif char == ')':  # 遇到右括号，子节点列表结束
            if stack:
                node = stack.pop()  # 弹出当前节点
    return node  # 根节点
```

## **例四 扩展二叉树（嵌套树）**
```
def build_tree(preorder):
    if not preorder or preorder[0] == '.':
        return None, preorder[1:]
    root = preorder[0]
    left, preorder = build_tree(preorder[1:])
    right, preorder = build_tree(preorder)
    return (root, left, right), preorder
```

## 二叉搜索树的遍历 **注意二叉搜索树的性质—中序遍历为有序表（笔试也会考）**
## AVL树最多有几层（这种数学公式笔试可能会考）
```
from functools import lru_cache
@lru_cache(maxsize=None)
def min_nodes(h):
 if h == 0: return 0
 if h == 1: return 1
 return min_nodes(h-1) + min_nodes(h-2) + 1

   def max_height(n):
    h = 0
    while min_nodes(h) <= n:
     h += 1
 return h - 1
   
   n = int(input())
   print(max_height(n))
```

# **（四）图**

## **1. 环**

### **例一 bfs拓扑**
```
def topological_sort(graph):
    indegree = defaultdict(int)
    result = []
    queue = deque()
    for u in graph:
        for v in graph[u]:
            indegree[v] += 1
    for u in graph:
        if indegree[u] == 0:
            queue.append(u)
    while queue:
        u = queue.popleft()
        result.append(u)
        for v in graph[u]:
            indegree[v] -= 1
            if indegree[v] == 0:
                queue.append(v)
    if len(result) == len(graph):
        return result
    else:
        return None
```
### **例二 dfs有向图判断环**
本质也是拓扑
```
def has_cycle(n,edges):
    graph=[[] for _ in range(n)]
    for u,v in edges:
        graph[u].append(v)
    color=[0]*n
    def dfs(node):
        if color[node]==1:
            return True
        if color[node]==2:
            return False
        color[node]=1
        for neighbor in graph[node]:
            if dfs(neighbor):
                return True
        color[node]=2
        return False
```

### **例三 舰队，海域出击！（不一定连通的无向图）**
```
def has_cycle(graph):
        visited=set()
        rec_stack=set()
        def dfs(vertex):
            if vertex in rec_stack:
                return True
            if vertex in visited:
                return False
            visited.add(vertex)
            rec_stack.add(vertex)
            for n in graph[vertex]:
                if dfs(n):
                    return True
            rec_stack.remove(vertex)
            return False
        for v in graph:
            if v not in visited:
                if dfs(v):
                    return True
        return False
```

### **例四 判断无向图是否连通有环**
**用到dfs，这道题很难理解**
```
n, m = list(map(int, input().split()))
edge = [[]for _ in range(n)]
for _ in range(m):
    a, b = list(map(int, input().split()))
    edge[a].append(b)
    edge[b].append(a)
cnt, flag = set(), False
def dfs(x, y):
    global cnt, flag
    cnt.add(x)
    for i in edge[x]:
        if i not in cnt:
            dfs(i, x)
        elif y != i:
            flag = True
for i in range(n):
    cnt.clear()
    dfs(i, -1)
    if len(cnt) == n:
        break
    if flag:
        break
```
## **2. 强连通分量 Kosaraju**
（非重点，稍微看看）
```
def dfs1(graph, node, visited, stack):
    visited[node] = True
    for neighbor in graph[node]:
        if not visited[neighbor]:
            dfs1(graph, neighbor, visited, stack)
    stack.append(node)#将相邻的顶点相邻存储
def dfs2(graph, node, visited, component):
    visited[node] = True
    component.append(node)
    for neighbor in graph[node]:
        if not visited[neighbor]:
            dfs2(graph, neighbor, visited, component)
def kosaraju(graph):
    stack = []
    visited = [False] * len(graph)
    for node in range(len(graph)):
        if not visited[node]:
            dfs1(graph, node, visited, stack)
    transposed_graph = [[] for _ in range(len(graph))]
    for node in range(len(graph)):#取反
        for neighbor in graph[node]:
            transposed_graph[neighbor].append(node)
    visited = [False] * len(graph)
    sccs = []
    while stack:
        node = stack.pop()
        if not visited[node]:
            scc = []
            dfs2(transposed_graph, node, visited, scc)
            sccs.append(scc)
    return sccs
```

## **3. 最短路径 笔试重中之重**
**floyd通常时间复杂度为n^3，所以机考不大可能考，笔试也是，但还是要理解一下**
### **例一 dijkstra**
```
def dijkstra(graph, start):
    pq = []
    start.distance = 0
    heapq.heappush(pq, (0, start))
    visited = set()
    while pq:
        currentDist, currentVert = heapq.heappop(pq)    # 当一个顶点的最短路径确定（也就是这个顶点从优先队列中被弹出时），它的最短路径不会再改变。
        if currentVert in visited:
            continue
        visited.add(currentVert)
        for nextVert in currentVert.getConnections():
            newDist = currentDist + currentVert.getWeight(nextVert)
            if newDist < nextVert.distance:#初始为inf，松弛
                nextVert.distance = newDist
                nextVert.pred = currentVert
                heapq.heappush(pq, (newDist, nextVert))
```

### **ROADS 经典dijkstra**
以下每行 R 通过指定由单个空字符分隔的整数 S、D、L 和 T 来描述一条道路：
S 是源城市 D 是目的地城市 L为道路长度 T为通行费（以硬币数量表示）
请注意，不同的道路可能具有相同的始发城市和目的地城市。
输出的第一行也是唯一的一行应包含从城市 1 到城市 N 的最短路径的总长度，其总通行费小于或等于 K 个硬币。
如果此类路径不存在，则只应将数字 -1 写入输出。
```
import heapq
def dijkstra(graph):
    pq=[]
    heapq.heapify(pq)
    heapq.heappush(pq,(0,0,1,0))#length,cost,end,step
    while pq!=[]:
        l,c,cur,d=heapq.heappop(pq)
        if cur==n:
            return l
        for l1,c1,e1 in graph[cur]:
            if c+c1<=k and d+1<n:
                heapq.heappush(pq,(l1+l,c+c1,e1,d+1))
    return -1
k,n,r=[int(input()) for _ in range(3)]
graph={i:[] for i in range(1,n+1)}
for _ in range(r):
    s,e,l,c=map(int,input().split())
    graph[s].append([l,c,e])
print(dijkstra(graph))
```

### 兔子与星空 dijistra
```
import heapq
def dijkstra(graph,start,end,p):
    if start==end:
        return []
    dist={i:(float('inf'),[])for i in graph}
    dist[start]=(0,[start])
    pos=[]
    heapq.heappush(pos,(0,start,[]))
    while pos:
        dist1,current,path=heapq.heappop(pos)
        for (next,dist2) in graph[current].items():
            if dist1+dist2<dist[next][0]:
                dist[next]=(dist1+dist2,path+[next])
                heapq.heappush(pos,(dist1+dist2,next,path+[next]))
    return dist[end][1]
p=int(input())
graph={input():{} for _ in range(p)}
for _ in range(int(input())):
    a,b,dis=input().split()
    graph[a][b]=graph[b][a]=int(dis)
for _ in range(int(input())):
    start,end=input().split()
    path=dijkstra(graph,start,end,p)
    s=start
    current=start
    for i in path:
        s+=f'->({graph[current][i]})->{i}'
        current=i
    print(s)
```
## **4. 最小生成树**

### **例一 prim**
```
def prim(graph, start):
    pq = []
    start.distance = 0
    heapq.heappush(pq, (0, start))
    visited = set()
    while pq:
        currentDist, currentVert = heapq.heappop(pq)
        if currentVert in visited:
            continue
        visited.add(currentVert)
        for nextVert in currentVert.getConnections():
            weight = currentVert.getWeight(nextVert)
            if nextVert not in visited and weight < nextVert.distance:
                nextVert.distance = weight
                nextVert.pred = currentVert
                heapq.heappush(pq, (weight, nextVert))
```

### **例二 kruskal and DisjointSet**
```
class DisjointSet:
    def __init__(self, num_vertices):
        self.parent = list(range(num_vertices))
        self.rank = [0] * num_vertices
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
    def union(self, x, y):
        root_x = self.find(x)
        root_y = self.find(y)
        if root_x != root_y:
            if self.rank[root_x] < self.rank[root_y]:
                self.parent[root_x] = root_y
            elif self.rank[root_x] > self.rank[root_y]:
                self.parent[root_y] = root_x
            else:
                self.parent[root_x] = root_y
                self.rank[root_y] += 1
def kruskal(graph):
    num_vertices = len(graph)
    edges = []
    for i in range(num_vertices):
        for j in range(i + 1, num_vertices):
            if graph[i][j] != 0:
                edges.append((i, j, graph[i][j]))
    # 按照权重排序
    edges.sort(key=lambda x: x[2])
    # 初始化并查集
    disjoint_set = DisjointSet(num_vertices)
    minimum_spanning_tree = []
    for edge in edges:
        u, v, weight = edge
        if disjoint_set.find(u) != disjoint_set.find(v):
            disjoint_set.union(u, v)
            minimum_spanning_tree.append((u, v, weight))
    return minimum_spanning_tree
```

# **（五） 排序**
**笔试是重点，作业题中出现过归并排序**

## **1. 插入排序**
```
def insertionSort(a):
	for i in range(1,len(a)): #每次把a[i]插入到合适位置
		e,j = a[i],i
		while j > 0 and e < a[j-1]: #比写 a[j-1]>e 适应性强
			a[j] = a[j-1]		#(1)
			j -= 1
		a[j] = e
```
## **2. 归并排序**
```
def merge(left,right):
    merged=[]
    inv_count=0
    i=j=0
    while i<len(left) and j<len(right):
        if left[i]<=right[j]:
            merged.append(left[i])
            i+=1
        else:
            merged.append(right[j])
            j+=1
            inv_count+=len(left)-i
    merged+=left[i:]
    merged+=right[j:]
    return merged,inv_count
def merge_sort(lst):
    if len(lst)<=1:
        return lst,0
    middle=len(lst)//2
    left,inv_left=merge_sort(lst[:middle])
    right,inv_right=merge_sort(lst[middle:])
    merged,inv_merged=merge(left,right)
    return merged,inv_left+inv_right+inv_merged
```
## **3. 快速排序**
```
def quickSort(a,s,e): #将a[s:e+1]排序
	if s >= e:
		return
	i,j = s,e
	while i != j:
		while i < j and a[i] <= a[j]:
			j -= 1
		a[i],a[j] = a[j],a[i]
		while i < j and a[i] <= a[j]:
			i += 1
		a[i], a[j] = a[j], a[i]
	#处理完后，a[i] = k
	quickSort(a,s,i-1)
	quickSort(a, i+1,e)
```
# **例一 二分查找**（月度开销）
```
n,m=map(int,input().split())
fajo=[]
for _ in range(n):
    fajo.append(int(input()))
def check(x):
    num=1
    cut=0
    for i in range(n):
        if cut+fajo[i]>x:
            num+=1
            cut=fajo[i]
        else:
            cut+=fajo[i]
    return num<=m
lo=max(fajo)
hi=sum(fajo)+1
while lo<hi:
    mid=(hi-lo)//2+lo
    if check(mid):
        hi=mid
    else:
        lo=mid+1
print(hi)
```
# **（六）常见错误**
### RuntimeError 考虑使用sys.setrecrusionlimit(layor) 避免爆栈

### （需掌握）二分查找

```python
import bisect

index_left = bisect.bisect_left(list, vary)		
#在list中查找vary的插入位置，使得插入后序列仍然保持有序,返回插入位置的索引;如果元素已存在，则返回最左边的位置
index3_right = bisect.bisect_right(list, num)
#在list中查找vary的插入位置，使得插入后序列仍然保持有序,返回插入位置的索引;如果元素已存在，则返回最右的位置
bisect.insort_left(list, vary)		
#将vary的插入list，使得插入后序列仍然保持有序;如果元素已存在，则插入到最左边的位置
bisect.insort_right(list, num)
#将vary的插入list，使得插入后序列仍然保持有序;如果元素已存在，则插入到最右边的位置
```

# **二 考后总结**
鼠鼠只ac了3道所以这份资料不太有参考价值，但是可以依照这份cheat sheet来进行系统的筛查弱项。
如果你是闫老师班的同学的话，那么模板绝不是考察的重点。
这门课的意义就在于提高理解问题、解决问题的能力，问题是多样的，如果一味地背诵模板，只会陷入和我一样的思维定势，很难达到闫老师心中对我们的期望（灵活运用）。
所以首先要理解，其次发展自己的想法，最后用自己的方式解决题目。题解固然很好，但是看多了就会失去自己的思维，考试也就抓瞎了。
希望所有同学能跟上闫老师和班上大佬的步伐，认认真真踏踏实实学习肯定是能取得好分数的。（虽然我应该不会了QAQ）
